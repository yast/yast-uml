/**
 * Module:	uml_network_proposal.ycp
 *
 * Author:	Ladislav Slezak <lslezak@suse.cz>
 *
 * Purpose:     UML network proposal
 *
 * $Id$
 *
 */

{
    textdomain "uml";

    import "UML";
    import "HTML";

    string func = (string) WFM::Args (0);
    map param = (map) WFM::Args (1);
    map ret = $[];

    if (func == "MakeProposal")
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	if (force_reset)
	{
	    // reset user settings and propose new values
	    UML::NetworkInitialize();
	}


	list<string> proposal = [];

	proposal = [
	    // Proposal item - TAP device name
	    sformat (_("Network Device: %1"), UML::tap_device),
	    // Proposal item - MAC adress of network card in the virtual machine
	    sformat (_("MAC Address of Virtual Network Card: %1"), UML::MAC_address),
	];

	ret = $[ "preformatted_proposal" :
		 HTML::List (proposal)
	];

	if (UML::tap_device == nil || UML::tap_device == "" || UML::MAC_address == nil || UML::MAC_address == "")
	{
	    // error in the installation proposal - don't allow to continue
	    ret = add(ret, "warning", _("Network configuration is not valid."));
	    ret = add(ret, "warning_level", `blocker);
	}
    }
    else if (func == "AskUser")
    {
	boolean has_next = param["has_next"]:false;
	symbol result = (symbol) WFM::CallFunction ("inst_uml_network",
						    [true, has_next]);
	ret = $[ "workflow_sequence" : result ];
    }
    else if (func == "Description")
    {
	ret =  $[
	  // this is a heading
	  "rich_text_title"	:	_("Network"),
	  // this is a menu entry
	  "menu_title"	:	_("&Network"),
	  "id"		:	"uml_network_setting"
	];
    }

    return ret;
}
