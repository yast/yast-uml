/**
 * Module:	uml_source_proposal.ycp
 *
 * Author:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:     Proposal for uml installation source
 *
 * $Id$
 *
 */
{
    textdomain "uml";

    import "UML";
    import "HTML";

    import "Report";
    Report::DisplayErrors(true, 0);

    string func = (string) WFM::Args (0);
    map param = (map) WFM::Args (1);
    map ret = $[];

    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	if (force_reset)
	{
	    UML::propose_selection ();
	}

	if (UML::inst_type == `configured && UML::source_id > 0)
	{
	    map product_data = Pkg::SourceProductData (UML::source_id);
	    map general_data = Pkg::SourceGeneralData (UML::source_id);
	    ret = $[ "preformatted_proposal" :
		     HTML::List ([product_data["label"]:"unknown" + " (" +
				  general_data["url"]:"" + ")"])
	    ];
	}
	else if (UML::inst_type == `custom)
	{
	    ret = $[ "preformatted_proposal" :
		    // installation proposal header
		    HTML::List ([_("Custom Installation Source") + " (" +
				  UML::custom_source + ")"])
	    ];
	}
	else if (UML::inst_type == `slp)
	{
	    ret = $[ "preformatted_proposal" :
		    // installation proposal header
		    HTML::List ([_("SLP Installation Source")])
	    ];
	}
	else
	{
	    ret = $[ "warning" :
		     // error during proposal for uml installation
		     _("No source selected"),
		     "warning_level" : `blocker
	    ];
	}
    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	symbol result = (symbol) WFM::CallFunction ("inst_uml_source",
						    [true, has_next]);

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	ret = $[
		// this is a heading
		"rich_text_title"	: _("Source"),
		// this is a menu entry
		"menu_title"		: _("Installation &Source"),
		"id"			: "uml_source_stuff"
	];
    }

    return ret;
}
