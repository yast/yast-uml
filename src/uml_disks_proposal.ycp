/**
 * Module:	uml_disks_proposal.ycp
 *
 * Author:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:     Proposal for uml disks
 *
 * $Id$
 *
 */
{
    textdomain "uml";

    import "UML";
    import "HTML";

    string func = (string) WFM::Args (0);
    map param = (map) WFM::Args (1);
    map ret = $[];

    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	// call some function that makes a proposal here:
	//
	// DummyMod::MakeProposal( force_reset );

	// Fill return map

	if (force_reset)
	{
	    UML::disks = [ $[ "size" : 1024, "sparse" : false] ];
	}

	list<string> tmp = [];

	integer i = 1;
	foreach (map<string,any> m, UML::disks, ``{
	    // Disk name for uml installation proposal
	    // %1 is a number, %2 size of disk, %3 is "(sparse image)" if it's set
	    tmp = add (tmp, sformat (_("Disk %1: %2 MB %3"), i, m["size"]:0, (m["sparse"]:false) ? _("(sparse file)") : ""));
	    i = i + 1;
	});

	// FIXME, space check

	ret = $[ "preformatted_proposal" :
		 HTML::List (tmp)
	];
    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	// call some function that displays a user dialog
	// or a sequence of dialogs here:
	//
	// sequence = DummyMod::AskUser( has_next );

	symbol result = (symbol) WFM::CallFunction ("inst_uml_disks",
						    [true, has_next]);

	// Fill return map

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	// Fill return map.
	//
	// Static values do just nicely here, no need to call a function.

	ret =
	    $[
	      // this is a heading
	      "rich_text_title"	:	_("Disks"),
	      // this is a menu entry
	      "menu_title"	:	_("&Disks"),
	      "id"		:	"uml_disk_stuff"
	    ];
    }

    return ret;
}
