/**
 * Module:	inst_uml_kickoff.ycp
 *
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Do various tasks before starting with uml installation.
 *
 * $Id$
 */
{
    import "UML";
    import "Directory";
    import "Progress";
    import "Report";
    import "Package";


    textdomain "uml";


    path umlpath = .uml.options;


    /**
     *
     */
    define boolean install_packages () ``{

	if (!Package::InstallAll (["um-host-kernel",
				   "um-host-install-initrd",
				   "uml-utilities",
				   "bridge-utils"]))
	{
	    Report::Error (_("Cannot install required packages."));
	    return false;
	}

	return true;
    }


    /**
     *
     */
    define boolean create_user () ``{

	if (!UML::CreateUser())
	{
	    Report::Error (sformat (_("Cannot create UML user %1"),
				    UML::username));
	    return false;
	}

	return true;
    }


    /**
     *
     */
    define void register_options_file () ``{
        string scr_file = (string)(SCR::Read (.target.tmpdir)) + "/uml_option.scr";
        SCR::Write (.target.string, scr_file,
		    sformat ("%1\n\n`ag_ini(`SysConfigFile(\"%2\"))\n", umlpath,
			     sformat ("/etc/sysconfig/uml/%1.conf", UML::username)));
        SCR::RegisterAgent (umlpath, scr_file);
    }


    /**
     *
     */
    define void unregister_options_file () ``{

	SCR::Write (umlpath, nil);
	SCR::UnregisterAgent (umlpath);

	// The options file must not be owned by the UML user.  Otherwise it
	// would be possible the change it from the UML instance which would
	// be a security hole.
	SCR::Execute (.target.bash, sformat ("/bin/chown root:root /etc/sysconfig/uml/%1.conf",
					     UML::username));
	SCR::Execute (.target.bash, sformat ("/bin/chmod 0644 /etc/sysconfig/uml/%1.conf",
					     UML::username));
    }


    /**
     *
     */
    define void save_options () ``{

	SCR::Write (add (umlpath, "MEMORY"), UML::memory_size);
	SCR::Write (add (umlpath, "NCPUS"), UML::number_of_cpus);

	SCR::Write (add (umlpath, "STARTMODE"), UML::start_mode);

	SCR::Write (add (umlpath, "USERNAME"), UML::username);
	SCR::Write (add (umlpath, "HOMEDIR"), UML::homedir);

	SCR::Write (add (umlpath, "TAP_DEVICE"), UML::tap_device);
	SCR::Write (add (umlpath, "MAC_ADDRESS"), UML::MAC_address);

	// connect virtual UML ethernet device to real device UML::eth_device
	SCR::Write (add (umlpath, "ETH_DEVICE"), UML::eth_device);

	SCR::Write (add (umlpath, "EXTRA_ARGS"), "");

    }


    /**
     *
     */
    define boolean make_disks () ``{

	SCR::Write (add (umlpath, "NDISKS"), size (UML::disks));

	integer i = 0;
	foreach (integer s, UML::disks, ``{

	    string disk_file = sformat ("ubd%1", i);

	    SCR::Write (add (umlpath, sformat ("DISK%1", i)), disk_file);

	    string cmd = "/bin/dd if=/dev/zero of=" + UML::homedir + "/" +
		disk_file + " bs=1M " + sformat ("count=%1", s);
	    SCR::Execute (.target.bash, cmd);

	    SCR::Execute (.target.bash, sformat ("/bin/chown %1:users %2/%3",
						 UML::username, UML::homedir,
						 disk_file));
	    SCR::Execute (.target.bash, sformat ("/bin/chmod 0600 %1/%2",
						 UML::homedir, disk_file));

	    i = i + 1;

	});

	return true;
    }


    /**
     *
     */
    define boolean copy_files () ``{

	list <string> files_kernel = Pkg::PkgGetFilelist ("um-host-kernel",
							  `installed);
	list <string> files_initrd = Pkg::PkgGetFilelist ("um-host-install-initrd",
							  `installed);

	files_kernel = filter (string s, files_kernel,
			       ``(substring (s, 0, size ("/usr/bin/linux")) ==
				  "/usr/bin/linux"));

	files_initrd = filter (string s, files_initrd,
			       ``(substring (s, 0, size ("/usr/lib/initrd")) ==
				  "/usr/lib/initrd"));

	string kernel = files_kernel[0]:"";
	string initrd = files_initrd[0]:"";

	y2milestone ("kernel and initrd %1 %2", kernel, initrd);

	if (kernel == "" || initrd == "")
	{
	    return false;
	}

	SCR::Execute (.target.bash, "/bin/cp " + kernel + " " + UML::homedir +
		      "/linux");

	SCR::Execute (.target.bash, sformat ("/bin/chown %1:users %2/linux",
					     UML::username, UML::homedir));
	SCR::Execute (.target.bash, sformat ("/bin/chmod 0700 %1/linux",
					     UML::homedir));

	SCR::Write (add (umlpath, "KERNEL"), "linux");

	SCR::Execute (.target.bash, "/bin/cp " + initrd + " " + UML::homedir +
		      "/initrd");

	SCR::Execute (.target.bash, sformat ("/bin/chown %1:users %2/initrd",
					     UML::username, UML::homedir));
	SCR::Execute (.target.bash, sformat ("/bin/chmod 0600 %1/initrd",
					     UML::homedir));

	SCR::Write (add (umlpath, "INITRD"), "initrd");

	return true;
    };


    /**
     *
     */
    define void start_uml () ``{

	map general_data = Pkg::SourceGeneralData (UML::source_id);
	string url = general_data["url"]:"";

	string uml_command = "cd " + UML::homedir + " ; " +
	    Directory::ybindir + "/start-uml " +
	    "/etc/sysconfig/uml/" + UML::username + ".conf";

	y2milestone("Starting first installation stage...");
	SCR::Execute (.target.bash, uml_command +
		      " install=" + url);


	// set root option and start second installation stage
	register_options_file();

	string root_file_name = UML::homedir + "root_dev";

	// check existence of mtab file - if it doesn't exists
	// then do not start second stage - installation probably failed
	integer sz = (integer)SCR::Read(.target.size, root_file_name);

	if (sz > 0)
	{
	    map out = (map) SCR::Execute(.target.bash_output, "/usr/bin/cut -f 1 -d \" \"", root_file_name);
	    string root_dev = "";

	    if (out["exit"]:-1 != 0 )
	    {
		 root_dev = (string) (out["stdout"]:"");
		 list<string> root_dev_list = splitstring(root_dev, "\n");
		 root_dev = root_dev_list[0]:"";

		 // remove mtab file
		SCR::Execute (.target.bash, "/bin/rm " + root_file_name);
	    }

	    y2milestone("UML root device: %1", root_dev);
	    SCR::Write (add (umlpath, "UML_ROOT_DEVICE"), "linux");

	    unregister_options_file();

	    y2milestone("Starting second installation stage...");

	    // add empty install command
	    SCR::Execute (.target.bash, uml_command + "install=");
	}
    }


    define boolean set_tun_permissions() ``{
	boolean ret = false;

	// set "tun" group
	string command = "/bin/chgrp tun /dev/net/tun";
	ret = (SCR::Execute(.target.bash, command) == 0);

	if (ret == true)
	{
	    // set RW access to device /dev/net/tun for group
	    command = "/bin/chmod g+rw /dev/net/tun";
	    ret = (SCR::Execute(.target.bash, command) == 0);
	}

	return ret;
    }


    list <string> progress_stages = [
				     // progress stages
				     _("Install packages"),
				     // progress stages
				     _("Create user"),
				     // progress stages
				     _("Save options"),
				     // progress stages
				     _("Create virtual disks"),
				     // progress stages
				     _("Copy kernel and initrd"),
				     // progress stages
				     _("Start UML installation")
    ];

    list progress_descriptions = [];

    integer progress_length = size(progress_stages);

    // Headline for UML Installation
    string headline = _("Preparing UML Installation");

    // help text
    string help_text = _("<P><B>Installation</B></P><P>Preparing UML virtual machine for installation...</P>");

    // enable progress
    Progress::on();

    // Headline for UML Installation
    Progress::New (headline, "", progress_length,
		   progress_stages, progress_descriptions, help_text);

    install_packages ();

    Progress::NextStage ();

    create_user ();
    set_tun_permissions();

    Progress::NextStage ();

    register_options_file ();

    save_options ();

    Progress::NextStage ();

    make_disks ();

    Progress::NextStage ();

    copy_files ();

    unregister_options_file ();

    Progress::NextStage ();

    Progress::Finish ();

    start_uml ();


    return `next;
}
