/**
 * Module:	inst_uml_kickoff.ycp
 *
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Do various tasks before starting with uml installation.
 *
 * $Id$
 */

{
    import "UML";
    import "Directory";
    import "Report";
    import "Package";

    textdomain "uml";


    path umlpath = .uml.options;


    /**
     *
     */
    define void register_options_file () ``{
        string scr_file = (string)(SCR::Read (.target.tmpdir)) + "/uml_option.scr";
        SCR::Write (.target.string, scr_file,
		    sformat ("%1\n\n`ag_ini(`SysConfigFile(\"%2\"))\n", umlpath,
			     sformat ("%1/OPTIONS", UML::homedir)));
        SCR::RegisterAgent (umlpath, scr_file);
    }


    /**
     *
     */
    define void unregister_options_file () ``{
	SCR::UnregisterAgent (umlpath);
    }


    /**
     *
     */
    define void save_options () ``{

	SCR::Write (add (umlpath, "MEMORY"), UML::memory_size);
	SCR::Write (add (umlpath, "NCPUS"), UML::number_of_cpus);

	SCR::Write (add (umlpath, "USERNAME"), UML::username);

	SCR::Write (add (umlpath, "EXTRA_ARGS"), "");

    }


    /**
     *
     */
    define void make_disks () ``{

	SCR::Write (add (umlpath, "NDISKS"), size (UML::disks));

	integer i = 0;
	foreach (integer s, UML::disks, ``{

	    string disk_file = sformat ("ubd%1", i);

	    SCR::Write (add (umlpath, sformat ("DISK%1", i)), disk_file);

	    string cmd = "/bin/dd if=/dev/zero of=" + UML::homedir + "/" + disk_file
	        + " bs=1M " + sformat ("count=%1", s);
	    SCR::Execute (.target.bash, cmd);

	    i = i + 1;

	});

    }


    /**
     *
     */
    define boolean copy_files () ``{

	list <string> files_kernel = Pkg::PkgGetFilelist ("um-host-kernel",
							  `installed);
	list <string> files_initrd = Pkg::PkgGetFilelist ("um-host-install-initrd",
							  `installed);

	files_kernel = filter (string s, files_kernel,
			       ``(substring (s, 0, size ("/usr/bin/linux")) ==
				  "/usr/bin/linux"));

	files_initrd = filter (string s, files_initrd,
			       ``(substring (s, 0, size ("/usr/lib/initrd")) ==
				  "/usr/lib/initrd"));

	string kernel = files_kernel[0]:"";
	string initrd = files_initrd[0]:"";

	y2milestone ("kernel and initrd %1", kernel, initrd);

	if (kernel == "" || initrd == "")
	{
	    return false;
	}

	SCR::Execute (.target.bash, "/bin/cp " + kernel + " " + UML::homedir +
		      "/linux");
	SCR::Write (add (umlpath, "KERNEL"), "linux");

	SCR::Execute (.target.bash, "/bin/cp " + initrd + " " + UML::homedir +
		      "/initrd");
	SCR::Write (add (umlpath, "INITRD"), "initrd");

	return true;

    };


    /**
     *
     */
    define void start_uml () ``{

	map general_data = Pkg::SourceGeneralData (UML::source_id);
	string url = general_data["url"]:"";

	SCR::Execute (.target.bash, "cd " + UML::homedir + " ; " +
		      Directory::ybindir + "/start-uml " +
		      " install=" + url);

    }


    // FIXME, show progress


    if (!Package::InstallAll (["um-host-kernel",
			       "um-host-install-initrd",
			       "uml-utilities"]))
    {
	Report::Error (_("Cannot install required packages."));
	return `abort;
    }


    if (!UML::CreateUser())
    {
	Report::Error (sformat(_("Cannot create UML user %1"), UML::username));
	return `abort;
    }


    register_options_file ();

    save_options ();
    make_disks ();
    copy_files ();

    unregister_options_file ();


    start_uml ();


    return `next;
}
