/**
 * File:	installation/uml/uml.ycp
 * Module:	System installation
 * Summary:	Main uml installation
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */

{
    textdomain "uml";

    import "Report";
    import "Arch";
    import "CommandLine";

    include "uml/cmdline.ycp";

    /**
     * Definition of command line mode options
     */
    map cmdline = $[
	// help text
	"help"      : _("Start UML (User Mode Linux) installation"),
	"id"        : "uml",
	"guihandler": GUIhandler,
	"actions"   : $[
	    "start" : $[
		// command description
		"help"      : _("Start UML installation"),
		"handler"   : startHandler
	    ]
	],
	"options" : $[
	    "install" : $[
		"type"      : "string",
		// option description
		"help"      : _("URL of installation source ")
	    ],
	    "user" : $[
		"type"      : "string",
		// option description
		"help"      : _("Set username which runsStart UML ")
	    ],
	    "home" : $[
		"type"      : "string",
		// option description
		"help"      : _("Home directory location of UML user")
	    ],
	    "mem" : $[
		"type"      : "string",
		// option description
		"help"      : _("Memory size used by UML machine")
	    ],
	    "startmode" : $[
		"type"      : "string",
		// option description
		"help"      : _("Start mode of the installed UML machine (manual,onboot)")
	    ],
	    "disk" : $[
		"type"      : "string",
		// option description
		"help"      : _("Size of virtual disk (image size)")
	    ],
	    "sparse" : $[
		"type"      : "string",
		// option description
		"help"      : _("Create sparse disk image file")
	    ],
	    "MAC" : $[
		"type"      : "string",
		// option description
		"help"      : _("MAC address of the virtual UML ethernet card")
	    ],
	    "netif" : $[
		"type"      : "string",
		// option description
		"help"      : _("Connect UML to this network interface (eth0, eth1,...)")
	    ]
	],
	"mappings" : $[
	    "start" : ["install", "user", "home", "mem", "startmode", "disk", "sparse", "MAC", "netif"]
	]
    ];

    if (Arch::is_uml () == true)
    {
	// we are already in UML, for nested UML we would need
	// nested UML kernel (CONFIG_NEST_LEVEL=1) which is not present
	Report::Error(_("UML installation cannot be started inside UML machine.
Start UML installation in the host system."));

	return `abort;
    }

    // check whether X window system is accessible
    // UML kernel starts xterm subprocesses, when there is no X it hangs!
    integer exit_status = (integer) SCR::Execute(.target.bash, "/usr/X11R6/bin/xdpyinfo");
    y2milestone("X check exit status: %1", exit_status);

    if (exit_status != 0)
    {
	Report::Error(_("UML installation requires access to a graphical environment."));

	return `abort;
    }

    any ret = CommandLine::Run(cmdline);

    return `next;
}
