/**
 * Module: 	inst_uml_options.ycp
 *
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Ask the user for various options for uml.
 *
 * $Id$
 *
 */

{
    textdomain "uml";

    import "UML";
    import "Wizard";
    import "Popup";

    // screen title for uml options
    string title = _("UML Options");

    // build and show dialog

    Wizard::OpenAcceptDialog ();

    term contents = `HVSquash(
			      `VBox(
				    `Left(`ComboBox(`id(`memory), `opt(`editable),
						    // combobox label
						    _("&Memory Size in MB:"),
						    ["256", "512"])),
// UML currently doesn't support SMP
//
//				    `Left(`ComboBox(`id(`ncpus), `opt(`editable),
//						    // combobox label
//						    _("Number of CPUs:"),
//						    ["1", "2", "4"])),
				    `Left(`ComboBox(`id(`startmode),
						    // combobox label
						    _("A&ctivation"),
						    [
						     // combobox item
						     `item(`id("manual"), _("Manually")),
						     // combobox item
						     `item(`id("onboot"), _("On Boot")),
						     ])),
				    `Left(`TextEntry(`id(`bootopts), _("Boot &Options"), UML::extra_args))
				    )
			      );

    string script_name = "/etc/init.d/uml";

    // help text for uml options
    string help_text = _("<P><B>Options</B></P>")
    + _("<P>Set how much host system memory will be used by the virtual machine.</P>")
    + _("<P>The UML machine can be started automatically on boot or manually when needed.</P>")
    + sformat(_("<P>Use the <I>%1</I> script for starting or stopping virtual machines or set
start mode <I>on boot</I> for automatic start.</P>
"), script_name)
    + _("<P><I>Boot Options</I> are used as extra arguments for UML kernel.</P>");

    Wizard::SetContents (title, contents, help_text, (boolean) WFM::Args(0),
			 (boolean) WFM::Args(1));

    UI::ChangeWidget (`id(`memory), `ValidChars, "0123456789");
    UI::ChangeWidget (`id(`memory), `Value, tostring (UML::memory_size));

//    UI::ChangeWidget (`id(`ncpus), `ValidChars, "0123456789");
//    UI::ChangeWidget (`id(`ncpus), `Value, tostring (UML::number_of_cpus));

    UI::ChangeWidget (`id(`startmode), `Value, UML::start_mode);

    any ret = nil;

    while (true)
    {
	ret = Wizard::UserInput ();

	if (ret == `cancel || ret == `back)
	    break;

	if (ret == `next)
	{
	    integer tmp1 = tointeger ((string) UI::QueryWidget (`id(`memory), `Value));
//	    integer tmp2 = tointeger ((string) UI::QueryWidget (`id(`ncpus), `Value));
	    string tmp3 = (string) UI::QueryWidget (`id(`startmode), `Value);
	    string boot = (string) UI::QueryWidget (`id(`bootopts), `Value);

	    if (tmp1 == nil || tmp1 <= 0)
	    {
		// error popup
		string message = _("Invalid amount of memory.");
		Popup::Message (message);
		continue;
	    }

//	    if (tmp2 == nil || tmp2 <= 0)
//	    {
//		// error popup
//		string message = _("Invalid number of CPUs.");
//		Popup::Message (message);
//		continue;
//	    }

	    UML::memory_size = tmp1;
//	    UML::number_of_cpus = tmp2;
	    UML::start_mode = tmp3;
	    UML::extra_args = boot;

	    break;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
