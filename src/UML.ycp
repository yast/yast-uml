/**
 * File:	modules/UML.ycp
 * Package:	UML configuration
 * Summary:	UML installation module
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */
{
    module "UML";

    import "Users";
    import "Report";

    textdomain "uml";

    global integer source_id = 0;

    global integer memory_size = 256;

    global integer number_of_cpus = 1;

    global list <integer> disks = [ 1024 ];

    global string username = "";

    global string homedir = "";

    global string MAC_address = "";

    global string tap_device = "";


    global define string propose_username() ``{

	string userprefix = "uml";
	integer index = 0;
	// limit number of user names for trying
	integer maxindex = 100;
	string ret = nil;

	while (index < maxindex && ret == nil)
	{
	    string user = sformat("%1%2", userprefix, index);

	    // check whether user already exists
	    string error = Users::CheckUsername(user);

	    if (error == "")
	    {
		ret = user;
	    }
	    else
	    {
		y2error("Error: %1", error);
	    }

	    index = index + 1;
	}

	return ret;
    }

    global define string propose_homedir(string user_name) ``{
	return (user_name != nil) ? (Users::GetDefaultHome("local") + user_name) : nil;
    }


    /**
     * Create specified UML user account in the system.
     * @return boolean true on success
     */
    global define boolean CreateUser() ``{
	map<string,any> user = $[
	    "homeDirectory" : homedir,
	    "userPassword"  : "",
	    "create_home"   : true,
	    "loginShell"    : "/bin/false",
	    "no_skeleton"   : true,
	    "username"      : username, //yast2-users changed internal key name...
//	    "uid"           : username,
	    "type"          : "local"
	];

	boolean ret = false;

	y2debug("Creating user: %1", user);


	Users::ResetCurrentUser ();

	if (Users::AddUser(user) == true)
	{
	    Users::CommitUser();

	    // don't show progress
	    Users::SetGUI(false);
	    ret = Users::Write();
	}
	else
	{
	    Report::Error (sformat(_("Cannot create account for user %1"),
				   username));
	}

	return ret;
    }


    global void UserInitialize() ``{
	// initialize Users:: module
	Users::SetGUI(false);
	Users::Read();

	// propose user name and home directory
	username = propose_username();
	homedir = propose_homedir(username);
    }

    global string propose_MAC_address() ``{
	string command = sformat("echo %1 | md5sum", UML::homedir + "/ubd0");
	map<string,any> out = (map<string,any>)SCR::Execute(.target.bash_output, command);
	list<string> result= splitstring(out["stdout"]:"", "\n");

	y2debug("result[0]: %1", result[0]:"");
	string ret = regexpsub(result[0]:"", "^(..)(..)(..)(..).*", "fe:fd:\\1:\\2:\\3:\\4");

	return ret;
    }

    global void NetworkInitialize() ``{
	tap_device = username;
	MAC_address = propose_MAC_address();
    }

    global void propose_selection () ``{
	list <integer> sources = Pkg::SourceGetCurrent (false);
	source_id = sources[0]:0;
    }


    global void UML() ``{
	UserInitialize();
	NetworkInitialize();
	propose_selection ();
    }
}
