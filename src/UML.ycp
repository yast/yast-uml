/**
 * File:	modules/UML.ycp
 * Package:	UML configuration
 * Summary:	UML installation module
 * Authors:	Arvin Schnell <arvin@suse.de>
 *
 * $Id$
 */
{
    module "UML";

    import "Users";
    import "Report";

    textdomain "uml";

    global integer source_id = 0;

    global symbol inst_type = `configured;

    global string custom_source = "";

    global integer memory_size = 256;

    global integer number_of_cpus = 1;

    global list <map <string,any> > disks = [ $["size" : 1024, "sparse" : false] ];

    global string start_mode = "manual";

    global string username = "";

    global string homedir = "";

    global string MAC_address = "";

    global string tap_device = "";

    global string eth_device = "eth0";

    global string extra_args = "selinux=0";


    global define string propose_username() ``{

	string userprefix = "uml";
	integer index = 0;
	// limit number of user names for trying
	integer maxindex = 100;
	string ret = nil;

	while (index < maxindex && ret == nil)
	{
	    string user = sformat("%1%2", userprefix, index);

	    // check whether user already exists
	    string error = Users::CheckUsername(user);

	    if (error == "")
	    {
		ret = user;
	    }
	    else
	    {
		y2error("Error: %1", error);
	    }

	    index = index + 1;
	}

	return ret;
    }

    global define string propose_homedir(string user_name) ``{
	return (user_name != nil) ? (Users::GetDefaultHome("local") + user_name) : nil;
    }

    global define boolean CreateTunGroup() ``{
	string error = Users::CheckGroupname("tun");
	boolean ret = false;

	y2debug("check group name: '%1'", error);
	if (error == "")
	{
	    Users::ResetCurrentGroup();

	    // create "tun" group
	    map<string, any> grp = Users::GetCurrentGroup();
	    grp["cn"] = "tun";
	    grp["type"] = "local";

	    ret = Users::AddGroup(grp) == "";
	    y2debug("Users::AddGroup: %1", ret);

	    if (ret == true)
	    {
		ret = Users::CommitGroup();
	    }

	    return ret;
	}

	y2internal("ret: %1", ret);
	return true;
    }

    /**
     * Create specified UML user account in the system.
     * @return boolean true on success
     */
    global define boolean CreateUser() ``{

	if (CreateTunGroup() == false)
	{
	    Report::Error(_("Cannot create group \"tun\"."));
	    return false;
	}

	map<string,any> user = $[
	    "homedirectory" : homedir,
	    "userpassword"  : "",
	    "create_home"   : true,
	    "loginshell"    : "/bin/false",
	    "no_skeleton"   : true,
	    "username"      : username,
	    "groupname"     : "tun",
	    "grouplist"     : $["tun":1],
	    "type"          : "local"
	];

	boolean ret = false;

	y2debug("Creating user: %1", user);


	Users::ResetCurrentUser ();

	if (Users::AddUser(user) == "")
	{
	    Users::CommitUser();

	    // don't show progress
	    Users::SetGUI(false);
	    ret = Users::Write() == "";
	    // enable reporting of errors
	    Users::SetGUI(true);
	}
	else
	{
	    Report::Error (sformat(_("Cannot create account for user %1."),
				   username));
	}

	return ret;
    }


    global void UserInitialize() ``{
	// initialize Users:: module
	Users::SetGUI(false);
	Users::Read();

	// propose user name and home directory
	username = propose_username();
	homedir = propose_homedir(username);
    }

    global string propose_MAC_address() ``{
	// use hostname and disk image file name for MAC address proposal
	// each UML machine on network should have different MAC address
	map<string,any> h_out = (map<string,any>)SCR::Execute(.target.bash_output, "/bin/hostname");
	string host_n = mergestring(splitstring(h_out["stdout"]:"", "\n"), "");
	string command = sformat("echo %1 | md5sum", UML::homedir + "/ubd0" + host_n);
	map<string,any> out = (map<string,any>)SCR::Execute(.target.bash_output, command);
	list<string> result= splitstring(out["stdout"]:"", "\n");

	y2debug("result[0]: %1", result[0]:"");
	string ret = regexpsub(result[0]:"", "^(..)(..)(..)(..).*", "fe:fd:\\1:\\2:\\3:\\4");

	return ret;
    }

    global void NetworkInitialize() ``{
	tap_device = username;
	MAC_address = propose_MAC_address();
    }

    global void propose_selection () ``{
	list <integer> sources = Pkg::SourceGetCurrent (false);

	list<map> installed_products = (list<map>)Pkg::TargetProducts();
	map last_product = $[];

	if (size(installed_products) > 0)
	{
	    // select the last installed product
	    last_product = installed_products[size(installed_products) - 1]:$[];
	}

	foreach(integer src, sources, ``{
		map general_data = Pkg::SourceGeneralData(src);
		string srcurl = general_data["url"]:"";

		// use only network sources in proposal
		if (regexpmatch(srcurl, "^(ftp)|(nfs)|(smb)|(http)://"))
		{
		    y2milestone("Found network source: %1", src);
		    source_id = src;
		}

		y2milestone("Pkg::SourceProductData: %1", Pkg::SourceProductData(src));
	    }
	);

	// proposed installation type is configured source
	inst_type = `configured;
    }


    global void UML() ``{
	UserInitialize();
	NetworkInitialize();
	propose_selection ();
    }
}
