/**
 * Module:	proposal_uml_options.ycp
 *
 * Author:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:     Proposal for uml options
 */
{
    textdomain "uml";

    import "UML";
    import "HTML";

    string func = (string) WFM::Args (0);
    map param = (map) WFM::Args (1);
    map ret = $[];

    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	if (force_reset)
	{
	    UML::memory_size = 256;
	    UML::number_of_cpus = 1;
	    UML::start_mode = "manual";
	}

	list<string> tmp = [];

	// Proposal for uml installation
	tmp = add (tmp, sformat (_("Memory Size: %1 MB"), UML::memory_size));

	// Proposal for uml installation
// UML currently doesn't support SMP
//	tmp = add (tmp, sformat (_("Number of CPUs: %1"), UML::number_of_cpus));

	// name for activation mode in uml installation proposal
	map start_mode_names = $[ "manual" : _("Manually"), "onboot" : _("On Boot") ];

	// Proposal for uml installation
	tmp = add (tmp, sformat (_("Activation: %1"),
				 start_mode_names[UML::start_mode]:"unknown"));

	ret = $[ "preformatted_proposal" :
		 HTML::List (tmp)
	];
    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	symbol result = (symbol) WFM::CallFunction ("inst_uml_options",
						    [true, has_next]);

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	ret =
	    $[
	      // this is a heading
	      "rich_text_title"	:	_("Options"),
	      // this is a menu entry
	      "menu_title"	:	_("&Options"),
	      "id"		:	"uml_options_stuff"
	    ];
    }

    return ret;
}
